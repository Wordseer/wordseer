/* Copyright 2012 Aditi Muralidharan. See the file "LICENSE" for the full license governing this code. */Ext.define('WordSeer.view.visualize.organizetool.OrganizeTool', {    alternateClassName: ['OrganizeTool'],    constructor:function() {        var desktop = D3Helper.getElFromSel(d3.select("div[id^=\"desktop\"]"));        var desk_h = D3Helper.getIntFromPx(D3Helper.getStyle(desktop, "height"));        var desk_w = D3Helper.getIntFromPx(D3Helper.getStyle(desktop, "width"));              // Create a window to place the draw component in        var win = Ext.create('Ext.Window', {            x: 75,            y: 65,            width: (desk_w * 0.85),            height: (desk_h * 0.75),            layout: 'fit',            title: 'Canvas',            titleAlign: 'center',            items: [],            listeners: {                close:function() {                    OrganizeTool.instance = null;                    OrganizeTool.isInstantiated = false;                    return;                }            }        })        win.show();          //draw organizetool in the window        this.draw(win);    },      //draw organizetool in the window    draw:function(win) {          //constants declared        var TOTALWIDTH = 986;        var TOTALHEIGHT = 476;        var w = TOTALWIDTH - 150;        var h = TOTALHEIGHT;        var GROUPH = 150;        var GROUPW = 250;        var toolsW = 150;        var toolsH = TOTALHEIGHT;          //some offset values, they decide where on the canvas objects are created        var YOFFSET = 50;        var XOFFSET = 100;        var ot = this;          //a dataset for each type of object        this.c_data = [];        var c_data = this.c_data;        this.d_data = [];        var d_data = this.d_data;        this.s_data = [];        var s_data = this.s_data;        this.a_data = [];        var a_data = this.a_data;        this.g_data = [];        var g_data = this.g_data;        this.set_data = [];        var set_data = this.set_data;        this.w_data = [];        var w_data = this.w_data;        //define initial color/shape counts        this.red_count = 0;        this.blue_count = 0;        this.green_count = 0;        this.yellow_count = 0;        this.rounded_count = 0;        this.right_count = 0;          //The different svg's and their positions on the window        var tools = d3.select("#" + win.body.id).append("svg")            .attr("width", toolsW)            .attr("height", "100%");        var canvas = d3.select("#" + win.body.id).append("svg")            .attr("style", "position: absolute; left: " + toolsW + ";")            .attr("width", "90%")            .attr("height", "100%")            .attr("id", "canvas");        this.canvas = canvas;        var title = d3.select("#" + win.body.id).append("svg")            .attr("style", "position: absolute; left: 50%;")            .attr("width", 200)            .attr("height", 30);          //the behaviors        var element_drag = Dragable.getDragBehavior(this.canvas);        var expand = Expandable.getExpandBehavior(75, GROUPH, 75, GROUPW, this.canvas);        var background_pan = Panable.getPanBehavior(this.canvas);            //drawing the canvas background...changing the class could cause            //some issues        canvas.append("rect")            .style("fill", "#FFFFCC")            .style("stroke-width", "0.1em")            .attr("class", "background")            .attr("width", "100%")            .attr("height", "100%");        canvas.selectAll(".background")            .call(background_pan);          //tools section        tools.append("rect")            .style("stroke", "black")            .style("fill", "#DDCCAA")            .attr("class", "tool-background")            .attr("height", "100%")            .attr("width", toolsW);        tools.append("svg:text")            .style("font-size", "14px")            .attr("class", "tool-background")            .attr("dy", 0 + 15)            .attr("dx", ( toolsW ) / 2)            .attr("text-anchor", "middle")            .text("Tools");          //tool buttons        tools.append("rect")            .style("stroke", "black")            .style("fill", "white")            .attr("class", "tool")            .attr("height", 25)            .attr("width", 125)            .attr("x", ( toolsW  - 125 ) / 2)            .attr("y",  30)            .attr("rx", 20)            .attr("ry", 20)            .on("mousedown", function(d) { Group.createGroup(g_data, canvas, element_drag, expand); });        tools.append("svg:text")            .attr("dy", 30 + 17)            .attr("dx", (( toolsW) / 2))            .attr("text-anchor", "middle")            .on("mousedown", function(d) { Group.createGroup(g_data, canvas, element_drag, expand); })            .text("Create Group");          tools.append("rect")            .style("stroke", "black")            .style("fill", "white")            .attr("class", "tool")            .attr("height", 25)            .attr("width", 125)            .attr("x", ( toolsW  - 125 ) / 2)            .attr("y",  60)            .attr("rx", 20)            .attr("ry", 20)            .on("mousedown", function(d) { Annotation.createAnnotation(a_data, canvas, element_drag);  });        tools.append("svg:text")            .attr("class", "tool")            .attr("dy", 60 + 17)            .attr("dx", ( toolsW ) / 2)            .attr("text-anchor", "middle")            .on("mousedown", function(d) { Annotation.createAnnotation(a_data, canvas, element_drag); })            .text("Create Annotation");        tools.append("rect")            .style("stroke", "black")            .style("fill", "white")            .attr("class", "tool")            .attr("height", 25)            .attr("width", 125)            .attr("x", ( toolsW  - 125 ) / 2)            .attr("y",  90)            .attr("rx", 20)            .attr("ry", 20)            .on("mousedown", function(d) { ot.showStats();  });        tools.append("svg:text")            .attr("dy", 90 + 17)            .attr("dx", (( toolsW) / 2))            .attr("text-anchor", "middle")            .on("mousedown", function(d) { ot.showStats(); })            .text("Canvas Stats");        tools.append("rect")            .style("stroke", "black")            .style("fill", "white")            .attr("class", "tool")            .attr("height", 25)            .attr("width", 125)            .attr("x", ( toolsW  - 125 ) / 2)            .attr("y",  120)            .attr("rx", 20)            .attr("ry", 20)            .on("mousedown", function(d) { ot.saveCanvas();  });        tools.append("svg:text")            .attr("dy", 120 + 17)            .attr("dx", (( toolsW) / 2))            .attr("text-anchor", "middle")            .on("mousedown", function(d) { ot.saveCanvas(); })            .text("Export");/*                              circles for development        tools.append("rect")            .style("stroke", "black")            .style("fill", "white")            .attr("class", "tool")            .attr("height", 25)            .attr("width", 125)            .attr("x", ( toolsW  - 125 ) / 2)            .attr("y",  90)            .attr("rx", 20)            .attr("ry", 20)            .on("mousedown", function(d) { Circle.createCircle(c_data, canvas, element_drag, "hello");  });        tools.append("svg:text")            .attr("dy", 90 + 15)            .attr("dx", (( toolsW) / 2))            .attr("text-anchor", "middle")            .on("mousedown", function(d) { Circle.createCircle(c_data, canvas, element_drag, "hello"); })            .text("create annotation");                       */    },    showStats:function(){        var ot = OrganizeTool.getInstance();        var numAll = this.countAll();        var numWords = this.w_data.length;        var numPhraseSets = this.set_data.length;        var numSentences = this.s_data.length;        var numDocs = this.d_data.length;        var numGroups = this.g_data.length;        var numFull = ot.numFullGroups();        var numEmpty = this.g_data.length - numFull;        var numAnnotations = this.a_data.length;        var numRed = this.red_count;        var numBlue = this.blue_count;        var numGreen = this.green_count;        var numYellow = this.yellow_count;        var numDefault = numAll - (numRed + numBlue + numGreen + numYellow);        alert("Canvas Stats \n\n" +              "Number of Objects : " + numAll + "\n" +              "Number of Words: " + numWords + "\n" +              "Number of Word Sets: " + numPhraseSets + "\n" +              "Number of Sentences: " + numSentences + "\n" +              "Number of Documents: " + numDocs + "\n" +              "Number of Groups: " + numGroups + "\n" +              "Number of Empty Groups: " + numEmpty + "\n" +              "Number of Annotations: " + numAnnotations + "\n\n" +              "Colors Chosen\n\n" +              "Red: " + numRed + "\n" +              "Blue: " + numBlue + "\n" +              "Green: " + numGreen + "\n" +              "Yellow: " + numYellow + "\n" +              "Default: " + numDefault + "\n\n" +              "Shape Chosen \n\n" +              "Rounded: " + this.rounded_count + "\n" +              "Rectangle: " + this.right_count + ""              );    },    updateColor:function(num, color){        switch(color) {            case "#F1B191":                this.red_count += num;                break;            case "#D1E1B1":                this.green_count += num;                break;            case "#B4B9F9":                this.blue_count += num;                break;            case "#F9D854":                this.yellow_count += num;                break;        }    },    updateShape:function(num, shape){        switch(shape) {            case "rounded":                this.rounded_count += num;                break;            case "right":                this.right_count += num;                break;        }    },    countAll:function(){        var els = this.canvas.selectAll(".foreground").select(function(d) {            if(this.getAttribute("use") === "container") {                return this;            }            else {                return null;            }        });        return D3Helper.elCount(els);    },    numFullGroups:function(){        var count = 0;        var svg = this.canvas;        var groups = svg.selectAll(".foreground").select(function(d) {            if(this.getAttribute("use") === "container" && this.getAttribute("type") === "group") {                return this;            }            else {                return null;            }        }).each(function(d) {            var parentID = this.id;            var children = svg.selectAll("*[parent=\"" + parentID + "\"]")            if (!children.empty()) {                count++;            }        });        return count;    },    createCircle:function(string){        Circle.createCircle(this.c_data, this.canvas, Dragable.getDragBehavior(this.canvas), string);    },    createDocument:function(string, count){        Document.createDocument(this.d_data, this.canvas, Dragable.getDragBehavior(this.canvas), string, count);    },    createSentence:function(string, count){        SentenceOT.createSentence(this.s_data, this.canvas, Dragable.getDragBehavior(this.canvas), string, count);    },    createWord:function(string){        WordOT.createWord(this.w_data, this.canvas, Dragable.getDragBehavior(this.canvas), string);    },    createSet:function(string){        SetOT.createSet(this.set_data, this.canvas, Dragable.getDragBehavior(this.canvas), string);    },    copyElement:function(el) {            svg = this.canvas;            var dataset;            var drag = Dragable.getDragBehavior(svg);            var textEl = svg.selectAll("#" + el.id).select(function(d) {                if (this.getAttribute("use") === "text") {                    return this;                }                else {                    return null;                }            });            var contEl = svg.selectAll("#" + el.id).select(function(d) {                if (this.getAttribute("use") === "container") {                    return this;                }                else {                    return null;                }            });            contEl = D3Helper.getElFromSel(contEl);            var text = "";            var tspans = textEl.selectAll("tspan");            if(!tspans.empty() ) {                tspans.each(function(d) {                    text = text + this.textContent+ " ";                });            }            else {                textEl.each(function(d) {                    text = text + this.textContent;                });            }            var newEl;            textEl = D3Helper.getElFromSel(textEl);            switch(el.getAttribute("type")) {                case "annotation":                    dataset = this.a_data;                    newEl = Annotation.createAnnotation(dataset, svg, drag, text);                    newEl = D3Helper.getElFromSel(newEl);                    Color.changeColor(newEl, contEl.getAttribute("oldfill"));                    break;                case "document":                    dataset = this.d_data;                    newEl = Document.createDocument(dataset, svg, drag, text, 0);                    newEl = D3Helper.getElFromSel(newEl);                    Color.changeColor(newEl, textEl.getAttribute("oldfill"));                    break;                case "sentence":                    dataset = this.s_data;                    newEl = SentenceOT.createSentence(dataset, svg, drag, text);                    newEl = D3Helper.getElFromSel(newEl);                    Color.changeColor(newEl, contEl.getAttribute("oldfill"));                    ShapeOT.changeShape(newEl, contEl.getAttribute("shape"));                    break;                case "set":                    dataset = this.set_data;                    newEl = SetOT.createSet(dataset, svg, drag, text);                    newEl = D3Helper.getElFromSel(newEl);                    Color.changeColor(newEl, contEl.getAttribute("oldfill"));                    ShapeOT.changeShape(newEl, contEl.getAttribute("shape"));                    break;                case "word":                    dataset = this.w_data;                    newEl = WordOT.createWord(dataset, svg, drag, text);                    newEl = D3Helper.getElFromSel(newEl);                    Color.changeColor(newEl, contEl.getAttribute("oldfill"));                    ShapeOT.changeShape(newEl, contEl.getAttribute("shape"));                    break;            }    },    removeElement:function(el) {            svg = this.canvas;            var dataset;            var contEl = svg.selectAll("#" + el.id).select(function(d) {                if (this.getAttribute("use") === "container") {                    return this;                }                else {                    return null;                }            });            if(el.getAttribute("type") === "document") {                contEl = svg.selectAll("#" + el.id).select(function(d) {                    if (this.getAttribute("use") === "text") {                        return this;                    }                    else {                        return null;                    }                });            }            contEl = D3Helper.getElFromSel(contEl);            if (contEl === undefined) {               return;            }            switch(contEl.getAttribute("oldfill")) {                case "#f1b191":                    this.red_count--;                    break;                case "#F1B191":                    this.red_count--;                    break;                case "#d1e1b1":                    this.green_count--;                    break;                case "#D1E1B1":                    this.green_count--;                    break;                case "#b4b9f9":                    this.blue_count--;                    break;                case "#B4B9F9":                    this.blue_count--;                    break;                case "#f9d854":                    this.yellow_count--;                    break;                case "#F9D854":                    this.yellow_count--;                    break;            }            switch (contEl.getAttribute("shape")) {                case "rounded":                    this.rounded_count--;                    break;                case "right":                    this.right_count--;                    break;            }            switch (el.getAttribute("type")) {                case "bubble":                    dataset = this.c_data;                    Circle.removeCircle(el, dataset, svg);                    break;                case "group":                    dataset = this.g_data;                    Group.removeGroup(el, dataset, svg);                    break;                case "annotation":                    dataset = this.a_data;                    Annotation.removeAnnotation(el, dataset, svg);                    break;                case "document":                    dataset = this.d_data;                    Document.removeDocument(el, dataset, svg);                    break;                case "sentence":                    dataset = this.s_data;                    SentenceOT.removeSentence(el, dataset, svg);                    break;                case "set":                    dataset = this.set_data;                    SetOT.removeSet(el, dataset, svg);                    break;                case "word":                    dataset = this.w_data;                    WordOT.removeWord(el, dataset, svg);                    break;            }    },    clearCanvas:function(svg) {        var r = confirm("Are you sure? Work will not be saved.");        if (r === true) {            var ot = this;            svg.selectAll(".foreground").each(function(d) {                ot.removeElement(this);            });        }    },    saveCanvas:function() {        var text = (new XMLSerializer).serializeToString(document.getElementById('canvas')); //D3Helper.getElFromSel(OrganizeTool.getInstance().canvas);        console.dir(text);        var result = $.ajax({            url: "../../src/php/savedata.php",            data: {                instance: "shakespeare", //TODO replace with actual instance                data: "" + text,                data_type: "svg", //TODO svg                source: "canvas",                user: "anonymous", //TODO user            },            type:"POST",        });//        console.log("clicked the button!");        //console.log(result);    },      //to make it a singleton(sort of)    statics: {        instance: null,        isInstantiated: false,        g_color: "#F1F1C1",        c_color: "red",        s_color: "#F9F7F7",        set_color: "#F9F7F7",        w_color: "#F9F7F7",        a_color: "#FFEE99",        getInstance:function() {            if(OrganizeTool.isInstantiated) {                return OrganizeTool.instance;            }            else {                var ot = new OrganizeTool();                OrganizeTool.instance = ot;                OrganizeTool.isInstantiated = true;                return ot;            }        }    }})