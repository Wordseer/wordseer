/* Copyright 2012 Aditi Muralidharan. See the file "LICENSE" for the full license governing this code. */
//conflicts with pan dragging...you could shift + drag, but then they would have to be defined in the same drag behavior which seems too messy
Ext.define('WordSeer.view.visualize.organizetool.behaviors.Selectable', {

    alternateClassName: ['Selectable'],
     
    statics: {     
 
           /* 
             This behavior allows resizing of groups by *dragging* the dark box 
             in the lower-right hand corner of the group. It is really a special
             case drag behavior. Dependant on the size of the group.
           */ 
           
        getSelectBehavior:function(svg){

               
            var select = d3.behavior.drag()
                .on("dragstart", selectstart)
                .on("drag", selectmove)
                .on("dragend", selectend);
               
              //if this is the first drag, then "yes". otherwise, "no"     
            var selfirst = "yes";
            
              //to save the mouse position between expandmove calls
            var selectx = 0;
            var selecty = 0;
                
              //called when mouse is clicked and held down as if to drag
            function selectstart(d, i) {
             
                  //create the box
                svg.append("rect")
                    .style("stroke", "blue")
                    .style("fill", "aliceblue")
                    .attr("id", "selectBox")
                    .attr("x", d3.event.x)
                    .attr("y", d3.event.y)
                    .attr("width", 0)
                    .attr("height", 0);
                
                selfirst = "yes";
                return;
            }   
            
              //called when mouse is held down and moved
            function selectmove(d, i) {
            
                var group = this.id;
                
                  //the previous mouse position
                var befx = selectx;
                var befy = selecty;
                
                  //the current mouse position
                selectx = d3.event.x;
                selecty = d3.event.y;
                
                  //how much the mouse position has changed
                var dx = (selectx - befx);
                var dy = (selecty - befy);
                
                  //if this is the first call, don't update
                if( selfirst === "yes") {
                    selfirst = "no";
                    return;
                }
                
                  //if this is not the first call, update the position 
                  //with changed x and y values (dx and dy)
                else {
                    selecttick(dx, dy, group);
                }
            }

              //called on a mouse up from a drag
            function selectend(d, i) {

                //select the boxes
                
                //deselect old boxes
                
                svg.selectAll("#selectBox").remove();
            }
            
              //update the movement (called from selectmove)
            function selecttick(dx, dy) { 
                
                var selectBox = getElFromSel(svg.selectAll("#selectBox") );
                
                  //minimum width and height check         
                var newHeight = parseInt(selectBox.getAttribute("height")) + dy;
                var newWidth = parseInt(selectBox.getAttribute("width")) + dx;  


                
                    //change the container's height and width (resize it) according to the mouse's movement
                  selectBox.attr("height", function(d) {
                      return newHeight;
                  })
                  .attr("width", function(d) {
                      return newWidth;
                  });
                  
                
            }

            return select;
        }

    }
})
